<templateSet group="Angular2 TypeScript Live Templates">
  <template name="component" value="import { Component, Input } from '@angular/core';&#10;&#10;@Component({&#10; moduleId: module.id,&#10; selector: 'mc-$selector$',&#10; templateUrl: '$snake$.html',&#10; styleUrls: ['$snake$.css'],&#10;})&#10;export class $capital$ {&#10;&#10; @Input() $END$&#10;}&#10;" description="Angular 2 component snippet" toReformat="true" toShortenFQNames="true">
    <variable name="snake" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <variable name="selector" expression="" defaultValue="'selector'" alwaysStopAt="true" />
    <variable name="capital" expression="capitalize(camelCase(snake))" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="service" value="import { Injectable } from '@angular/core';&#10;&#10;@Injectable()&#10;export class $ServiceName$Service {&#10;$END$&#10; constructor() { }&#10;}" description="Angular 2 service snippet" toReformat="true" toShortenFQNames="true">
    <variable name="ServiceName" expression="" defaultValue="&quot;ServiceName&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="pipe" value="import { Pipe, PipeTransform } from '@angular/core';&#10;&#10;@Pipe({&#10; name: '$name$'&#10;})&#10;&#10;export class $PipeName$Pipe implements PipeTransform {&#10; transform(value: any, args: any[]): any {&#10;  $END$&#10; }&#10;}" description="Angular 2 pipe snippet" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="PipeName" expression="" defaultValue="&quot;PipeName&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="routing" value="import { Routes, RouterModule } from '@angular/router';&#10;&#10;import { $Name$Component } from './$name$.component';&#10;&#10;export const routes: Routes = [&#10;  { path: '$path$', component: $Name$Component },&#10;];&#10;&#10;export const routing = RouterModule.for${Root|Child}(routes);&#10;&#10;export const routedComponents = [$Name$Component];" description="Angular 2 routing file snippet" toReformat="true" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="path" expression="" defaultValue="&quot;path&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="http-get" value="return this.http.get('$url$')&#10; .map((response: Response) =&gt; response.json()$END$);" description="Angular 2 Http.get snippet" toReformat="true" toShortenFQNames="true">
    <variable name="url" expression="" defaultValue="&quot;url&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="subscribe" value="this.$service$.$function$()&#10; .subscribe($arg$ =&gt; this.$property$ = $arg$);&#10;$END$" description="Angular 2 observable subscribe snippet" toReformat="true" toShortenFQNames="true">
    <variable name="service" expression="" defaultValue="&quot;service&quot;" alwaysStopAt="true" />
    <variable name="function" expression="" defaultValue="&quot;function&quot;" alwaysStopAt="true" />
    <variable name="arg" expression="" defaultValue="&quot;arg&quot;" alwaysStopAt="true" />
    <variable name="property" expression="" defaultValue="&quot;property&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="bootstrap" value="import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';&#10;&#10;import { $App$Module } from './$app$.module';&#10;&#10;platformBrowserDynamic().bootstrapModule($App$Module)&#10; .then(success =&gt; console.log(`Bootstrap success`))&#10; .catch(error =&gt; console.log(error));&#10;$END$" description="Angular 2 bootstrap snippet" toReformat="true" toShortenFQNames="true">
    <variable name="App" expression="" defaultValue="&quot;App&quot;" alwaysStopAt="true" />
    <variable name="app" expression="" defaultValue="&quot;app&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="component-root" value="import { Component } from '@angular/core';&#10;&#10;@Component({&#10; moduleId: module.id,&#10; selector: '$my-app$',&#10; template: `&#10;  &lt;router-outlet&gt;&lt;/router-outlet&gt;&#10;  `&#10;})&#10;export class $App$Component { }&#10;$END$" description="Angular 2 App root component snippet" toReformat="true" toShortenFQNames="true">
    <variable name="App" expression="" defaultValue="&quot;App&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="module-root" value="import { NgModule } from '@angular/core';&#10;import { BrowserModule  } from '@angular/platform-browser';&#10;import { HttpModule } from '@angular/http';&#10;&#10;import { $App$Component } from './$app$.component';&#10;import { routing } from './$app$.routing'; //TODO: Create $app$.routing&#10;&#10;@NgModule({&#10; imports: [&#10;  BrowserModule,&#10;  HttpModule,&#10;  routing,&#10; ],&#10; declarations: [$App$Component],&#10; providers: [/* TODO: Providers go here */],&#10; bootstrap: [$App$Component],&#10;})&#10;export class $App$Module { }&#10;$END$" description="Angular 2 Root Module snippet" toReformat="true" toShortenFQNames="true">
    <variable name="App" expression="" defaultValue="&quot;App&quot;" alwaysStopAt="true" />
    <variable name="app" expression="" defaultValue="&quot;app&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="module" value="import { NgModule } from '@angular/core';&#10;&#10;import { $Name$Component }   from './$name$.component';&#10;&#10;@NgModule({&#10; imports: [],&#10; exports: [],&#10; declarations: [$Name$Component],&#10; providers: [],&#10;})&#10;export class $Name$Module { }&#10;$END$" description="Angular 2 Module snippet" toReformat="true" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ngclass" value="[ngClass]=&quot;{$cssClass$: $expression$}&quot;" description="Angular 2 ngClass snippet" toReformat="true" toShortenFQNames="true">
    <variable name="cssClass" expression="" defaultValue="&quot;cssClass&quot;" alwaysStopAt="true" />
    <variable name="expression" expression="" defaultValue="&quot;expression&quot;" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
      <option name="JADE" value="true" />
    </context>
  </template>
  <template name="ngfor" value="*ngFor=&quot;let $item$ of $list$&quot;" description="Angular 2 *ngFor snippet" toReformat="true" toShortenFQNames="true">
    <variable name="item" expression="" defaultValue="&quot;item&quot;" alwaysStopAt="true" />
    <variable name="list" expression="" defaultValue="&quot;list&quot;" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
      <option name="JADE" value="true" />
    </context>
  </template>
  <template name="ngif" value="*ngIf=&quot;$expression$&quot;" description="Angular 2 *ngIf snippet" toReformat="true" toShortenFQNames="true">
    <variable name="expression" expression="" defaultValue="&quot;expression&quot;" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
      <option name="JADE" value="true" />
    </context>
  </template>
  <template name="ngmodel" value="[(ngModel)]=&quot;$binding$&quot;" description="Angular 2 ngModel snippet" toReformat="true" toShortenFQNames="true">
    <variable name="binding" expression="" defaultValue="&quot;binding&quot;" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
      <option name="JADE" value="true" />
    </context>
  </template>
  <template name="routerLink" value="[routerLink]=&quot;['/$routeName$']&quot;" description="Angular 2 routerLink snippet" toReformat="true" toShortenFQNames="true">
    <variable name="routeName" expression="" defaultValue="&quot;routeName&quot;" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
      <option name="JADE" value="true" />
    </context>
  </template>
  <template name="ngstyle" value="[ngStyle]=&quot;{$style$: $expression$}&quot;" description="Angular 2 ngStyle snippet" toReformat="true" toShortenFQNames="true">
    <variable name="style" expression="" defaultValue="&quot;style&quot;" alwaysStopAt="true" />
    <variable name="expression" expression="" defaultValue="&quot;expression&quot;" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
      <option name="JADE" value="true" />
    </context>
  </template>
  <template name="ngswitch" value="&lt;div [ngSwitch]=&quot;$conditionExpression$&quot;&gt;&#10; &lt;div *ngSwitchCase=&quot;$expression$&quot;&gt;$output$&lt;/div&gt;&#10; &lt;div *ngSwitchDefault&gt;$output2$&lt;/div&gt;&#10;&lt;/div&gt;" description="Angular 2 ngSwitch snippet" toReformat="true" toShortenFQNames="true">
    <variable name="conditionExpression" expression="" defaultValue="&quot;conditionExpression&quot;" alwaysStopAt="true" />
    <variable name="expression" expression="" defaultValue="&quot;expression&quot;" alwaysStopAt="true" />
    <variable name="output" expression="" defaultValue="&quot;output&quot;" alwaysStopAt="true" />
    <variable name="output2" expression="" defaultValue="&quot;output2&quot;" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
      <option name="JADE" value="true" />
    </context>
  </template>
  <template name="effect" value="@Effect() $type$Effect = this.actions&#10; .ofType(ACTION_TYPES.$TYPE$)&#10; $END$" description="ngrx-effect" toReformat="true" toShortenFQNames="true">
    <variable name="type" expression="" defaultValue="'type'" alwaysStopAt="true" />
    <variable name="TYPE" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>